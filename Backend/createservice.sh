#!/bin/bash

# This script creates a Node service.
# It takes the name of the service as an argument.
# The service is Node.js based and uses Express.js as the framework.

# Make sure parameter is passed
if [[ -z $1 ]]; then 
    echo "$(tput setaf 1)No parameter passed"
    exit -1
fi
SERVICE_NAME=$(echo $1 | tr '[:upper:]' '[:lower:]')

# Check if node is installed
if ! command -v node &> /dev/null; then
    echo "$(tput setaf 1)node could not be found. Please install node and try again."
    exit -1
fi

# Create folder
if [[ -d "./$SERVICE_NAME" ]]; then
    echo "$(tput setaf 1)$SERVICE_NAME already exists on your filesystem."
    exit -1
fi
mkdir $SERVICE_NAME

# Initialize npm project
cd $SERVICE_NAME

npm init -y
npm i express
npm i typescript ts-node nodemon @types/node @types/express eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin prettier eslint-config-prettier eslint-plugin-prettier --save-dev
mkdir src

# Create boilerplate files
cat > index.ts << EOF
'use strict';

// Import the express in typescript file
import express from 'express';

// Initialize the express engine
const app: express.Application = express();

// Take a port 8080 for running server.
const port = 8080;

// Handling '/' Request
app.get('/', (_req, _res) => {
    _res.send("TypeScript With Express");
});

// Server setup
app.listen(port, () => {
    console.log(\`TypeScript with Express http://localhost:\${port}/\`);
});
EOF

cat > tsconfig.json << EOF
{
    "compilerOptions": {
        "target": "es6",
        "module": "commonjs",
        "rootDir": "./",
        "outDir": "./build",
        "esModuleInterop": true,
        "strict": true
    }
}
EOF

# Add scripts to package.json
awk '/scripts/ { print; print "\t\t\"start\": \"nodemon index.ts\",\n\t\t\"build\": \"tsc\","; next }1' package.json > tmp.package.json
mv tmp.package.json package.json

# TODO: Add scripts for linting and formatting

# Create lint and formatting configurations using ESLint and Prettier
cat > .eslintrc << EOF
{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "plugins": [
        "@typescript-eslint",
        "prettier"
    ],
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
    ],
    "rules": { 
    "no-console": [1, { "allow": ["info", "warn", "error"] }],
    }
}
EOF

cat > .eslintignore << EOF
node_modules
dist
EOF

cat > .prettierrc << EOF
{
    "semi": true,
    "trailingComma": "none",
    "singleQuote": true,
    "printWidth": 80,
    "useTabs": true,
	"tabWidth": 4
}
EOF

# Create other misc files
cat > .gitignore << EOF
# Created by https://www.toptal.com/developers/gitignore/api/node
# Edit at https://www.toptal.com/developers/gitignore?templates=node

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit

# End of https://www.toptal.com/developers/gitignore/api/node
EOF

cat > .nvmrc << EOF
19
EOF

# Create Dockerfile
cat > Dockerfile << EOF
FROM node:19-alpine

# Create app directory
WORKDIR /usr/src/app

# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json ./

RUN npm install
# If you are building your code for production
# RUN npm ci --only=production

# Bundle app source
COPY . .

RUN npm run build

EXPOSE 8080
CMD ["node", "./build/index.js"]
EOF

cat > .dockerignore << EOF
node_modules
npm-debug.log
EOF